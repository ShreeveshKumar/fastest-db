// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: store.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GeoStore_AddPoint_FullMethodName    = "/storepb.GeoStore/AddPoint"
	GeoStore_GetPoint_FullMethodName    = "/storepb.GeoStore/GetPoint"
	GeoStore_UpdatePoint_FullMethodName = "/storepb.GeoStore/UpdatePoint"
	GeoStore_DeletePoint_FullMethodName = "/storepb.GeoStore/DeletePoint"
)

// GeoStoreClient is the client API for GeoStore service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GeoStoreClient interface {
	AddPoint(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*AddResponse, error)
	GetPoint(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	UpdatePoint(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error)
	DeletePoint(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
}

type geoStoreClient struct {
	cc grpc.ClientConnInterface
}

func NewGeoStoreClient(cc grpc.ClientConnInterface) GeoStoreClient {
	return &geoStoreClient{cc}
}

func (c *geoStoreClient) AddPoint(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*AddResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddResponse)
	err := c.cc.Invoke(ctx, GeoStore_AddPoint_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *geoStoreClient) GetPoint(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, GeoStore_GetPoint_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *geoStoreClient) UpdatePoint(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateResponse)
	err := c.cc.Invoke(ctx, GeoStore_UpdatePoint_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *geoStoreClient) DeletePoint(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, GeoStore_DeletePoint_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GeoStoreServer is the server API for GeoStore service.
// All implementations must embed UnimplementedGeoStoreServer
// for forward compatibility.
type GeoStoreServer interface {
	AddPoint(context.Context, *AddRequest) (*AddResponse, error)
	GetPoint(context.Context, *GetRequest) (*GetResponse, error)
	UpdatePoint(context.Context, *UpdateRequest) (*UpdateResponse, error)
	DeletePoint(context.Context, *DeleteRequest) (*DeleteResponse, error)
	mustEmbedUnimplementedGeoStoreServer()
}

// UnimplementedGeoStoreServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGeoStoreServer struct{}

func (UnimplementedGeoStoreServer) AddPoint(context.Context, *AddRequest) (*AddResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPoint not implemented")
}
func (UnimplementedGeoStoreServer) GetPoint(context.Context, *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPoint not implemented")
}
func (UnimplementedGeoStoreServer) UpdatePoint(context.Context, *UpdateRequest) (*UpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePoint not implemented")
}
func (UnimplementedGeoStoreServer) DeletePoint(context.Context, *DeleteRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePoint not implemented")
}
func (UnimplementedGeoStoreServer) mustEmbedUnimplementedGeoStoreServer() {}
func (UnimplementedGeoStoreServer) testEmbeddedByValue()                  {}

// UnsafeGeoStoreServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GeoStoreServer will
// result in compilation errors.
type UnsafeGeoStoreServer interface {
	mustEmbedUnimplementedGeoStoreServer()
}

func RegisterGeoStoreServer(s grpc.ServiceRegistrar, srv GeoStoreServer) {
	// If the following call pancis, it indicates UnimplementedGeoStoreServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GeoStore_ServiceDesc, srv)
}

func _GeoStore_AddPoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeoStoreServer).AddPoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GeoStore_AddPoint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeoStoreServer).AddPoint(ctx, req.(*AddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GeoStore_GetPoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeoStoreServer).GetPoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GeoStore_GetPoint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeoStoreServer).GetPoint(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GeoStore_UpdatePoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeoStoreServer).UpdatePoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GeoStore_UpdatePoint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeoStoreServer).UpdatePoint(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GeoStore_DeletePoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeoStoreServer).DeletePoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GeoStore_DeletePoint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeoStoreServer).DeletePoint(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GeoStore_ServiceDesc is the grpc.ServiceDesc for GeoStore service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GeoStore_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "storepb.GeoStore",
	HandlerType: (*GeoStoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddPoint",
			Handler:    _GeoStore_AddPoint_Handler,
		},
		{
			MethodName: "GetPoint",
			Handler:    _GeoStore_GetPoint_Handler,
		},
		{
			MethodName: "UpdatePoint",
			Handler:    _GeoStore_UpdatePoint_Handler,
		},
		{
			MethodName: "DeletePoint",
			Handler:    _GeoStore_DeletePoint_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "store.proto",
}
